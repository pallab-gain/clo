/*
 * Global Variables
 */
var redis = require('redis').createClient();
var status = require('./status.js');
var crypto = require('crypto');
var random = require('randomstring');
var Log = require('./logger.js');
var inspect = require('util').inspect;
var TAG = 'Redis.io';

/*
 * Main Routine
 */
redis.on('error', function(err) {
  Log.e(TAG, err);
});

redis.on('ready', function() {
  Log.i(TAG, 'ready');

  redis.flushall();
});

function get_channel_list(callback) {
  redis.hgetall('channel', function(err, data) {
    if(err) {
      callback(err);
      return;
    }

    data = JSON.parse(data);

    Log.i(TAG + '.get_channel_list', '');
    callback(null, data);
  });
}

function /* er */ existChannel(email, callback) {
  redis.hget('channel', email, function(err, data) {
    Log.i(TAG + '.existChannel', data);
    Log.i(TAG + '.existChannel', inspect(data));

    if(err) {
      callback(err);
      return;
    }

    if(!data) {
      Log.i(TAG + '.existChannel', '채널이 없습니다.');
      callback(null, false);
      return;
    }

    var data = JSON.parse(data);

    Log.i(TAG + '.existChannel', JSON.stringify(data));
    callback(null, data.title ? true : false);
  });
}

// BEGIN existChannel
function /* es */ existBroadcaster(email, callback) {
  redis.hget('broadcaster', email, function(err, data) {
    if(err) {
      callback(err);
      console.log('Reids.existBroadcaster, Error: ' + err);
      return;
    }

    callback(null, (data ? true : false));
    console.log('Reids.existBroadcaster, Result: ' + (data ? true : false));
  });
}

// function /* es */ existChannel(email, callback) {
/*
  redis.llen('broadcaster', function(err, len) {
    if(err) {
      callback(err);
      return;
    }

    if(len == 0) {
      callback('empty set');
      return;
    }

    es_list_length_callback(len, callback);
  });
}
*/

function es_list_length_callback(len, callbeck) {
  redis.lrange('broadcaster', 0, len, function(err, list) {
    if(err) {
      Log.e(TAG + '.es_list_length_callback', err);
      callback(err);
      return;
    }

    Log.i(TAG + '.es_list_length_callback', inspect(list));
    es_list_range_callback(list, callback);
  });
}

function es_list_range_callback(list, callback) {
  for(i = 0; i < len; i++) {
    if(JSON.parse(ret[i]).email == email) {
      Log.i(TAG + '.es_list_range_callback', true);
      callback(null, true);
      return;
    }
  }

  Log.i(TAG + '.es_list_range_callback', false);
  callback(null, false);
}
// END existChannel

// BEGIN createSession
function /* cs */ createSession(email) {
  redis.hset('broadcaster', email, JSON.stringify({}));
}

function /* cr */ createChannel(email, name, title, img, callback) {
  redis.hget('broadcaster', email, function(err, data) {
    if(err) {
      Log.e(TAG + '.createChannel', err);
      callback(err);
      return;
    }

    if(!data) {
      Log.i(TAG + '.createChannel', '로그인 후 사용하세요.');
      callback('Not logged in.');
      return;
    }

    // redis.hset('broadcaster', email, JSON.stringify(data));
    redis.hset('channel', email, JSON.stringify({
      'title': title,
      'name': name,
      'img': img
    }));

    Log.i(TAG + '.createChannel', '채널을 생성합니다.');
    Log.i(TAG + '.createChannel', '계정: ' + email);
    Log.i(TAG + '.createChannel', '제목: ' + title);

    callback(null);
  });
}

function /* dr */ removeChannel(email) {
  redis.hdel('channel', email, function(err, ret) {
    if(err) {
      Log.e(TAG + '.removeChannel', err);
      callback(err);
      return;
    }
  });
}

// function /* cs */ createSession(email, callback) {
/*
  redis.rpush('broadcaster', JSON.stringify({
    'email': email
  }));
}
*/
// END createSession

// BEGIN destroySession
function /* ds */ destroySession(email) {
  redis.hdel('broadcaster', email, function(err, ret) {
    if(ret == 0) {
      return;
    }

    Log.i(TAG + '.destroySession', email);
  });
}

// function /* ds */ destroySession(email, callback) {
/*
  redis.llen('broadcaster', function(err, len) {
    if(err) {
      log(err);
      return;
    }

    if(len == 0) {
      return;
    }

    // TODO ds_list_lrange_session
  });
}
*/
// END destroySession

/*
 * Export Symbol
 */
module.exports.existChannel = existChannel;
module.exports.createSession = createSession;
module.exports.existChannel = existChannel;
module.exports.createChannel = createChannel;
module.exports.removeChannel = removeChannel;
module.exports.destroySession = destroySession;
module.exports.get_channel_list = get_channel_list;

