$(function() {
  var RTCPeerConnection = window.mozRTCPeerConnection || window.webkitRTCPeerConnection;
  var nodeServer = 'http://211.189.20.193:10000';
  var iceServers = {
    'iceServers' : [{
      'url': 'stun:stun.l.google.com:19302'
    }, {
      'url': 'turn:211.189.20.193:3478'
    }]
  };
  var SUCCESS = 0;
  var FAILURE = 1;
  var btnChannel = $('#btnChannel');
  var btnChat = $('#btnChat');
  var lstChannel = $('#divChannelList');
  var lstChat0 = $('#divChatList0');
  var lstChat1 = $('#divChatList1');
  var lstChat2 = $('#divChatList2');
  var lstChat3 = $('#divChatList3');
  var lstChat4 = $('#divChatList4');
  var socket = io.connect(nodeServer);
  var waitForReceiveChannelList = false;
  var topMessageListId = 'divChatList0';

  socket.connectionMap = {};
  socket.channelMap = {};
  socket.chatMap = {};
  socket.videoMap = {};

  function getEmailFromVideoIndex(index) {
    for(var email in socket.videoMap) {
      if(socket.videoMap[email] == index) {
        return email;
      }
    }
  }

  function showChatPanel(index) {
    $('#divChannelList').hide();

    for(var i = 0; i < 5; i++) {
      if(i == index) {
        $('#divChatList' + i).show();
      } else {
        $('#divChatList' + i).hide();
      }
    }
  }

  function onClickVideo(container) {
    if(container.indexOf('0') > -1) { // 메인일 경우
      if(!confirm('시청중인 방송을 끄시겠습니까?')) {
        return;
      }

      conn = socket.connectionMap[$(container).attr('email')];
      conn.video.pause();
      conn.container.empty();

      socket.emit('leaveChannel', {
        'email': conn.email
      });

      console.log('방송이 종료되었습니다.');

      for(var i = 1; i <= 4; i++) {
        var mainLink  = $('#divVideo' + i + ' a')[0];
        var mainEmail = $('#divVideo' + i).attr('email');

        if($('#divVideo0').children().length > 0) {
          $('#divVideo0').empty();
          $('#divVideo0').append(mainLink);
          $('#divVideo0 video')[0].play();

          socket.connectionMap[$('#divVideo0').attr('email')].video = $('#divVideo0 video')[0];

          $('#divVideo0 a').unbind('click');
          $('#divVideo0 a').click(function() {
            onClickVideo('#divVideo0');
          });

          break;
        }
      }

      socket.connectionMap[$(container).attr('email')] = null;
      $(container).attr('email', null);
    } else { // swap
      var mainLink  = $('#divVideo0 a')[0];
      var mainEmail = $('#divVideo0').attr('email');
      var subLink  = $(container + ' a')[0];
      var subEmail = $(container).attr('email');

      if($('#divVideo0').children().length > 0) {
        socket.connectionMap[$(container).attr('email')].video = $(container + ' video')[0];

        $(container).empty();
        $(container).append(mainLink);
        $(container + ' video')[0].play();

        $(container + ' a').unbind('click');
        $(container + ' a').click(function() {
          onClickVideo(container);
        });
      }

      socket.connectionMap[$('#divVideo0').attr('email')].video = $('#divVideo0 video')[0];

      $('#divVideo0').empty();
      $('#divVideo0').append(subLink);
      $('#divVideo0 video')[0].play();

      $('#divVideo0 a').unbind('click');
      $('#divVideo0 a').click(function() {
        onClickVideo('#divVideo0');
      });
    }
  }

  function connect(email) {
    if(Object.keys(socket.connectionMap).length == 5) {
      alert('비디오를 재생할 공간이 없습니다.');
    }

    var conn = new RTCPeerConnection(iceServers);
    conn.email = email;

    socket.connectionMap[email] = conn;
    socket.videoMap[email] = $('<video autoplay="true" style="width:100%; height:100%"></video>')[0];
//    conn.video = $('<video autoplay="true" style="width:100%; height:100%"></video>')[0];

    conn.onicecandidate = function(e) {
      if(conn.iceGatheringState != 'complete') {
        if(e.candidate) {
          conn.addIceCandidate(new RTCIceCandidate(e.candidate));
        }
        return;
      }

      if(conn.isEntered) {
        return;
      }

      socket.emit('enterChannel', {
        'email': email
      });

      conn.isEntered = true;
    };

    conn.onaddstream = function(e) {
      socket.connectionMap[email].video.src = URL.createObjectURL(e.stream);
    };

    conn.onsignalingstatechange = function(e) {
      if(conn.signalingState == 'closed') {
        conn.video.pause();
        conn.container.empty();

        socket.emit('leaveChannel', {
          'email': conn.email
        });

        socket.connectionMap[$(container).attr('email')] = null;
        $(container).attr('email', null);

        console.log('방송이 종료되었습니다.');
      }
    };

    for(var i = 0; i < 5; i++) {
      var container = $('#divVideo' + i); 

      if(container.children().length == 0) {
        var link = $('<a></a>');
        link.append(socket.videoMap[email]);
        link.click(function() {
          onClickVideo(container.selector);
        });

        container.append(link);
        container.attr('email', email);
        conn.container = container;
        console.log('비디오 추가');

        break;
      }
    }

    conn.createOffer(function(desc) {
      conn.setLocalDescription(desc);
      socket.offer = desc.sdp;
    }, function(err) {
      alert(err);
    }, {
      mandatory: {
        OfferToReceiveAudio: true,
        OfferToReceiveVideo: true
      }
    });
  }

  function formatDate(d) {
    var year = d.getFullYear();
    var month = d.getMonth();
    var date = d.getDate();
    var hour = d.getHours();
    var minute = d.getMinutes();
    var second = d.getSeconds();

    return year + '-' + month + '-' + date + ' ' + hour + ':' + minute + ':' + second;
  }

  function createChannelBox(email, encodedImage, title, name) { 
    var channelBox = $('<a style="display:inline-block;width:93%;'
      + 'background:#fff;'
      + 'margin:8px 8px 0 8px;'
      + '"></a>');
    channelBox.click(function() {
      if(socket.connectionMap[email] != null) {
        alert('이미 시청중인 채널입니다.');
        return;
      }

      connect(email);
    });

    var thumbnail;
    if(encodedImage == null || encodedImage == 'undefined') {
      thumbnail = $('<img style="display:inline-block;width:50px;height:100%;float:left;" src="/img/user.png" />');
    } else {
      thumbnail = $('<img style="display:inline-block;width:50px;height:100%;float:left;" src="data:image/png;base64,' + encodedImage + '" />');
    }
    channelBox.append(thumbnail);

    var titleBox = $('<div style="display:block;margin-left:55px;'
      + 'font-weight:bold;'
      + 'color:#000;'
      + 'font-size:12pt;'
      + 'padding:2px;'
      + '"></div>');
    titleBox.html(title);
    channelBox.append(titleBox);

    var nameBox = $('<div style="display:block;margin-left:55px;'
      + 'font-size:9pt;'
      + 'color:#444;'
      + '"></div>');
    nameBox.html(name);
    channelBox.append(nameBox);
    return channelBox;
  }

  function createChatBox(message, isAlignRight) {
    var chatBox = $('<div style="display:inline-block;width:100%;'
      + 'background:#ebb867;'
      + 'border-bottom:1px solid #6f5e55;'
      + 'border-radius:15px;'
      + 'padding:2px;'
      + 'margin-bottom:2px;'
      + 'text-align:' + (isAlignRight ? 'right' : 'left') + ';'
      + '"></div>');
    var thumbnail = $('<img src="/img/user.png" style="'
      + 'display:inline-block;width:50px;height:50px;'
      + 'float:' + (isAlignRight ? 'right' : 'left') + ';'
      + '" />');
    var dateBox = $('<div style="display:block;margin-left:55px;'
//      + 'border:1px solid #000;'
      + 'color:#3c536f;'
      + 'text-decoration:underline;'
      + 'padding:0 0 2px 0;'
      + '"></div>');
    dateBox.html(formatDate(new Date()));

    var messageBox = $('<div style="display:block;margin-left:55px;'
//      + 'border:1px solid #000;'
      + '"></div>');
    messageBox.html(message);

    chatBox.append(thumbnail);
    chatBox.append(dateBox);
    chatBox.append(messageBox);
    return chatBox;
  }

  socket.on('enterChannel', function(data) {
    var ret = data.ret;
    var email = data.email;

    if(ret == FAILURE) {
      console.log(email + ' 채널에 접속할 수 없습니다.');
      return;
    }

    if(socket.channelMap[email] != null) {
      alert('이미 시청중인 채넣입니다.');
      return;
    }

    for(var i = 0; i < 5; i++) {
      if($('#divVideo' + i).children().length == 0) {
        socket.channelMap[email] = i;
        console.log('채널: ' + email + ', 번호: ' + i);
        break;
      }
    }

    if(socket.chatMap[email] == null) {
      for(var i = 0; i < 5; i++) {
        if($('#divChatList' + i).children().length == 0) {
          socket.chatMap[email] = i;
          socket.emit('offer', {
            'email': email,
            'sdp': socket.connectionMap[email].localDescription.sdp
          });
          break;
        }
      }
    }

    console.log(email + ' 채널에 접속하였습니다.');
  });

  socket.on('getChannelList', function(data) {
    var count = 0;

    for(var channel in data.channelList) {
      var broadcaster = JSON.parse(data.channelList[channel]);
      var name;

      try {
        name = atob(broadcaster.name);
      } catch(err) {
        name = broadcaster.name;
      }

      lstChannel.append(createChannelBox(channel, broadcaster.img, broadcaster.title, name));
      count++;
    }

    if(count == 0) {
      alert('방송중인 채널이 없습니다.');
    }

    waitForReceiveChannelList = false;
  });

  socket.on('removeChannel', function(data) {
    var email = data.email;

    socket.connectionMap[email].close();
    delete socket.connectionMap[email];
    console.log(email + ' 채널이 종료되었습니다.');
  });

  socket.on('offer', function(data) {
    var ret = data.ret;

    if(ret == FAILURE) {
      alert('채널 시청에 실패하였습니다.');
    }
  });

  socket.on('answer', function(data) {
    var email = data.email;
    var sdp = data.sdp;
    var conn = socket.connectionMap[email];

    if(conn) {
      conn.setRemoteDescription(new RTCSessionDescription({
        'type': 'answer',
        'sdp':  sdp
      }));
    } else {
      console.log('멀티미디어를 받을 연결이 없습니다.');
    }
  });

  socket.on('chat', function(data) {
    var socketId = data.socketId;
    var email = data.email;
    var message = data.message;

    $('#divChatList' + socket.chatMap[email]).append(createChatBox(message));

    console.log('소켓: ' + socketId + ', 채널: ' + email + ', 메시지: ' + message);
  });

  btnChannel.click(function(e) {
    var pnlChannel = $('#divChannelList');
    var pnlChat = $('#' + topMessageListId);

    pnlChat.hide();
    pnlChannel.show();

    btnChannel.addClass('btn-primary');
    btnChannel.removeClass('btn-default');
    btnChat.addClass('btn-default');
    btnChat.removeClass('btn-primary');

    if(waitForReceiveChannelList) {
      return;
    }

    waitForReceiveChannelList = true;
    lstChannel.empty();
    socket.emit('getChannelList');
  });

  btnChat.click(function(e) {
    var pnlChannel = $('#divChannelList');
    var pnlChat = $('#' + topMessageListId);

    btnChat.addClass('btn-primary');
    btnChat.removeClass('btn-default');
    btnChannel.addClass('btn-default');
    btnChannel.removeClass('btn-primary');

    pnlChannel.hide();
    pnlChat.show();
  });
});
